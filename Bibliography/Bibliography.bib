@article{Sabry1998,
author = {Sabry, Amr},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.9 - What is a purely functional language.pdf:pdf},
journal = {Language},
mendeley-groups = {Master Thesis},
number = {January},
pages = {1--22},
publisher = {DTU Library - Tech Info Ctr of Denmark},
title = {{What is a Purely Functional Language ? 1 Functional Languages and Computational E ects}},
volume = {1},
year = {1998}
}
@misc{CommentaryFunction,
mendeley-groups = {Master Thesis},
title = {{GHC Commentary: RTS Function Calls}},
url = {https://ghc.haskell.org/trac/ghc/wiki/Commentary/Rts/HaskellExecution/FunctionCalls},
urldate = {2018-01-10}
}
@misc{Charles2016,
author = {Charles, Ollie},
mendeley-groups = {Master Thesis},
title = {{Monad transformers, free monads, mtl, laws and a new approach}},
url = {https://ocharles.org.uk/blog/posts/2016-01-26-transformers-free-monads-mtl-laws.html},
urldate = {2018-01-10},
year = {2016}
}
@article{Marlow2006,
abstract = {Higher-order languages that encourage currying are typically implemented using one of two basic evaluation models: push/enter or eval/apply. Implementors use their intuition and qualitative judgements to choose one model or the other. Our goal in this paper is to provide, for the first time, a more substantial basis for this choice, based on our qualitative and quantitative experience of implementing both models in a state-of-the-art compiler for Haskell. Our conclusion is simple, and contradicts our initial intuition: compiled implementations should use eval/apply. Capsule Review Language implementors are often faced with choices about how to implement a particular language feature. Unfortunately, there is often little empirical evidence to guide us in these choices and we must rely on our, often faulty, intuition. This paper examines the choice between two different implementation techniques for curried function application and provides important guidance to future implementors about this choice. The two techniques are " push/enter, " where the callee is responsible for arity matching, and " eval/apply, " where the caller is responsible for arity matching. While many people's intuition might be that " push/enter " is more efficient, and thus worth a more complex implementation, this paper shows that, in fact, the two techniques have essentially the same performance on a wide range of Haskell programs. Thus, one concludes that implementors should choose the simpler approach: namely, eval/apply.},
author = {Marlow, Simon and Jones, Simon Peyton},
doi = {10.1017/S0956796806005995},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.11 - Making a fast curry - Push$\backslash$:enter vs Eval$\backslash$:apply for higher-order Languages.pdf:pdf},
journal = {JFP},
mendeley-groups = {Master Thesis},
number = {5},
pages = {415--449},
title = {{Making a fast curry: push/enter vs. eval/apply for higher-order languages}},
url = {http://www.cs.tufts.edu/{~}nr/cs257/archive/simon-peyton-jones/eval-apply-jfp.pdf},
volume = {16},
year = {2006}
}
@article{Brown2012,
abstract = {This chapter discusses some of the design decisions that shaped LLVM1, an umbrella project that hosts and develops a set of close-knit low-level toolchain components (e.g., assemblers, compilers, debuggers, etc.), which are designed to be compatible with existing tools typically used on Unix systems. The name "LLVM" was once an acronym, but is now just a brand for the umbrella project. While LLVM provides some unique capabilities, and is known for some of its great tools (e.g., the Clang compiler2, a C/C++/Objective-C compiler which provides a number of benefits over the GCC compiler), the main thing that sets LLVM apart from other compilers is its internal architecture.},
author = {Brown, Amy and Wilson, Greg},
isbn = {9781257638017},
keywords = {book,open source},
mendeley-groups = {Master Thesis},
pages = {388},
title = {{The Architecture of Open Source Applications - Volume I}},
url = {http://www.aosabook.org/en/ghc.html},
year = {2012}
}

@article{Launchbury1995,
abstract = {. Some algorithms make critical internal use of updatable state, even though their external specification is purely functional. Based on earlier work on monads, we present a way of securely encapsulating stateful computations that manipulate multiple, named, mutable objects, in the context of a non-strict, purely-functional language. The security of the encapsulation is assured by the type system, using parametricity. The same framework is also used to handle input/output operations (state...},
author = {Launchbury, John and {Peyton Jones}, Simon L.},
doi = {10.1007/BF01018827},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.10 - State in Haskell.pdf:pdf;::},
issn = {08924635},
journal = {LISP and Symbolic Computation},
keywords = {Functional programming,input-output,side-effects,types},
mendeley-groups = {Master Thesis},
number = {4},
pages = {293--341},
title = {{State in Haskell}},
volume = {8},
year = {1995}
}
@misc{Snoyman2017,
author = {Snoyman, Michael},
mendeley-groups = {Master Thesis},
title = {{The ReaderT Design Pattern}},
url = {https://www.fpcomplete.com/blog/2017/06/readert-design-pattern},
urldate = {2018-01-10},
year = {2017}
}
@misc{Allen2014,
author = {Allen, Christopher},
mendeley-groups = {Master Thesis},
title = {{First hour of my talk Monad Transformers}},
url = {https://www.youtube.com/watch?v=v9Kkybc1Idg},
urldate = {2018-01-10},
year = {2014}
}
@misc{Darwin2015,
author = {Darwin, Ben},
mendeley-groups = {Master Thesis},
title = {{Programming with Algebraic Effects and Handlers}},
url = {https://www.youtube.com/watch?v=RpqGG-N5p1I},
urldate = {2018-01-10},
year = {2015}
}
@misc{Joashc2015,
author = {Joashc},
mendeley-groups = {Master Thesis},
title = {{Free monads in 7 easy steps}},
url = {https://joashc.github.io/posts/2015-09-13-free-monad-steps.html},
urldate = {2018-01-10},
year = {2015}
}
@misc{Joashc2016,
author = {Joashc},
mendeley-groups = {Master Thesis},
title = {{Free monads in category theory}},
url = {https://joashc.github.io/posts/2016-03-23-free-monads.html},
urldate = {2018-01-10},
year = {2016}
}
@misc{Simonite2017,
author = {Simonite, Tom},
mendeley-groups = {Master Thesis},
title = {{Apple's â€˜Neural Engine' Infuses the iPhone With AI Smarts | WIRED}},
url = {https://www.wired.com/story/apples-neural-engine-infuses-the-iphone-with-ai-smarts/},
urldate = {2018-01-10},
year = {2017}
}
@article{Pereira2017,
abstract = {This paper presents a study of the runtime, memory usage and energy consumption of twenty seven well-known soft- ware languages.We monitor the performance of such lan- guages using ten different programming problems, expressed in each of the languages. Our results show interesting find- ings, such as, slower/faster languages consuming less/more energy, and how memory usage influences energy consump- tion.We show how to use our results to provide software engineers support to decide which language to use when energy efficiency is a concern.},
author = {Pereira, Rui and Couto, Marco and Ribeiro, Francisco and Rua, Rui and Fernandes, Jo{\~{a}}o Paulo and Cunha, J{\'{a}}come and Saraiva, Joao},
doi = {10.1145/3136014.3136031},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/M.2 - Energy Efficiency across Programming Languages.pdf:pdf},
isbn = {9781450355254},
journal = {International Conference on Software Language Engineering},
keywords = {acm reference format,energy efficiency,francisco ribeiro,green software,guage benchmarking,j{\'{a}}come cunha,lan-,marco couto,programming languages,rui pereira,rui rua},
mendeley-groups = {Master Thesis},
pages = {12},
title = {{Energy Efficiency across Programming Languages}},
url = {https://sites.google.com/view/energy-efficiency-languages},
year = {2017}
}
@article{Lima2016,
abstract = {Recent work has studied the effect that factors such as code obfuscation, refactorings and data types have on energy efficiency. In this paper, we attempt to shed light on the energy behavior of programs written in a lazy purely functional language, Haskell. We have conducted two empirical studies to analyze the energy efficiency of Haskell programs from two different perspectives: strictness and concurrency. Our experimental space exploration comprises more than 2000 configurations and 20000 executions. We found out that small changes can make a big difference in terms of energy consumption. For example, in one of our benchmarks, under a specific configuration, choosing one data sharing primitive (MVar) over another (TMVar) can yield 60{\%} energy savings. In another benchmark, the latter primitive can yield up to 30{\%} energy savings over the former. Thus, tools that support developers in quickly refactoring a program to switch between different primitives can be of great help if energy is a concern. In addition, the relationship between energy consumption and performance is not always clear. In sequential benchmarks, high performance is an accurate proxy for low energy consumption. However, for one of our concurrent bench- marks, the variants with the best performance also exhibited the worst energy consumption. To support developers in better understanding this complex relationship, we have extended two existing performance analysis tools to also collect and present data about energy consumption.},
author = {Lima, Luis Gabriel and Soares-Neto, Francisco and Lieuthier, Paulo and Castor, Fernando and Melfe, Gilberto and Fernandes, Joao Paulo},
doi = {10.1109/SANER.2016.85},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.7 - Haskell in Green Land - Analyzing the Energy Behavior of a Purely Functional Language.pdf:pdf},
isbn = {978-1-5090-1855-0},
journal = {2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
mendeley-groups = {Master Thesis},
pages = {517--528},
title = {{Haskell in Green Land: Analyzing the Energy Behavior of a Purely Functional Language}},
url = {http://ieeexplore.ieee.org/document/7476671/},
year = {2016}
}
@article{Mittal2014,
abstract = {Recent technological advances have greatly improved the performance and features of embedded systems. With the number of just mobile devices now reaching nearly equal to the population of earth, embedded systems have truly become ubiquitous. These trends, however, have also made the task of managing their power consumption extremely challenging. In recent years, several techniques have been proposed to address this issue. In this paper, we survey the techniques for managing power consumption of embedded systems. We discuss the need of power management and provide a classification of the techniques on several important parameters to highlight their similarities and differences. This paper is intended to help the researchers and application-developers in gaining insights into the working of power management techniques and designing even more efficient high-performance embedded systems of tomorrow.},
archivePrefix = {arXiv},
arxivId = {1401.0765},
author = {Mittal, Sparsh},
doi = {10.1504/IJCAET.2014.065419},
eprint = {1401.0765},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/B.2 - A Survey of Techniques For Improving Energy Efficiency in Embedded Computing Systems.pdf:pdf},
issn = {17572665},
keywords = {a survey of techniques,classification,embedded systems,energy efficiency,follows,for improving energy efficiency,green computing,in embedded computing systems,int,j,low power design,mittal,of computer,power management,reference to this paper,review,s,should be made as,survey,sustainable computing},
mendeley-groups = {Master Thesis},
title = {{A Survey of Techniques For Improving Energy Efficiency in Embedded Computing Systems}},
url = {http://arxiv.org/abs/1401.0765},
year = {2014}
}
@article{Ray2017,
abstract = {What is the effect of programming languages on software qual-ity? This question has been a topic of much debate for a very long time. In this study, we gather a very large data set from GitHub (729 projects, 80 Million SLOC, 29,000 authors, 1.5 million com-mits, in 17 languages) in an attempt to shed some empirical light on this question. This reasonably large sample size allows us to use a mixed-methods approach, combining multiple regression model-ing with visualization and text analytics, to study the effect of lan-guage features such as static v.s. dynamic typing, strong v.s. weak typing on software quality. By triangulating findings from differ-ent methods, and controlling for confounding effects such as team size, project size, and project history, we report that language de-sign does have a significant, but modest effect on software quality. Most notably, it does appear that strong typing is modestly better than weak typing, and among functional languages, static typing is also somewhat better than dynamic typing. We also find that func-tional languages are somewhat better than procedural languages. It is worth noting that these modest effects arising from language de-sign are overwhelmingly dominated by the process factors such as project size, team size, and commit size. However, we hasten to caution the reader that even these modest effects might quite possi-bly be due to other, intangible process factors, e.g., the preference of certain personality types for functional, static and strongly typed languages.},
author = {Ray, Baishakhi and Posnett, Daryl and Devanbu, Premkumar and Filkov, Vladimir},
doi = {10.1145/3126905},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/M.1 - A Large-Scale Study of Programming Languages and Code Quality in GitHub.pdf:pdf},
isbn = {9781450330565},
issn = {00010782},
journal = {Communications of the ACM},
mendeley-groups = {Master Thesis},
number = {10},
pages = {91--100},
title = {{A large-scale study of programming languages and code quality in GitHub}},
url = {http://dl.acm.org/citation.cfm?doid=3144574.3126905},
volume = {60},
year = {2017}
}
@article{,
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/B.1 - Advanced Power Management Techniques for Mobile Communication Systems.pdf:pdf},
mendeley-groups = {Master Thesis},
number = {February},
title = {{Advanced Power Management Techniques for Mobile Communication Systems}},
year = {2016}
}
@article{Kiselyov2015,
abstract = {We present a rational reconstruction of extensible effects, the recently proposed alternative to monad transformers, as the confluence of efforts to make effectful computations compose. Free monads and then extensible effects emerge from the straightforward term representation of an effectful computation, as more and more boilerplate is abstracted away. The generalization process further leads to freer monads, constructed without the Functor constraint. The continuation exposed in freer monads can then be represented as an efficient type-aligned data structure. The end result is the algorithmically efficient extensible effects library, which is not only more comprehensible but also faster than earlier implementations. As an illustration of the new library, we show three surprisingly simple applications: non-determinism with committed choice (LogicT), catching IO exceptions in the presence of other effects, and the semi-automatic management of file handles and other resources through monadic regions. We extensively use and promote the new sort of `laziness', which underlies the left Kan extension: instead of performing an operation, keep its operands and pretend it is done.},
author = {Kiselyov, Oleg and Ishii, Hiromi},
doi = {10.1145/2804302.2804319},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.8 - Freer Monads, More Extensible Effects.pdf:pdf},
isbn = {9781450338080},
issn = {03621340},
journal = {Proceedings of the 8th ACM SIGPLAN Symposium on Haskell - Haskell 2015},
keywords = {coroutine,effect handler,effect interaction,free monad,kan extension,open union,type and effect system},
mendeley-groups = {Master Thesis},
pages = {94--105},
title = {{Freer monads, more extensible effects}},
url = {http://dl.acm.org/citation.cfm?doid=2804302.2804319},
year = {2015}
}
@article{Batchelor2013,
author = {Batchelor, Oliver and Green, Richard},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.6 - Cloud Haskell - First impressions and applications to processing large image datasets.pdf:pdf},
isbn = {9781479908837},
mendeley-groups = {Master Thesis},
pages = {412--417},
title = {{Cloud Haskell : First impressions and applications to processing large image datasets Benchmark : Batch processing images Example : Work stealing slave}},
year = {2013}
}
@article{Narzt2015,
abstract = {Purpose â€“ This paper aims to develop generic strategies for improving energy consumption for location sensing on smartphones and compares the results of iOS and Android implementations. Mobile smartphone applications utilizing localization sensors (e.g. Global Positioning System) collectively face the problem of battery draining. Energy consumption is at a peak when applications permanently and stolidly use those sensors, even if their excessive exploitation is avoidable (e.g. when the user carrying the device is not moving). Design/methodology/approach â€“ Considering contextual parameters affecting localization of mobile devices (i.e. incorporating movement probability, speed, etc.) is the basic idea for developing a strategy capable of reducing energy consumption for location determination on mobile devices. This paper explains the paradigm and draws the architecture for a generic context-based energy saving strategy for mobile location-based services. Findings â€“ The paper reveals the positive implicatio...},
author = {Narzt, Wolfgang},
doi = {10.1108/IJPCC-01-2015-0001},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/B.3 - Power-saving localization techniques for mobile devices A comparison between iOS and Android.pdf:pdf},
issn = {1742-7371},
journal = {International Journal of Pervasive Computing and Communications},
keywords = {Android,Context,Energy-efficient localization,Location-based services,Mobile devices,iOS},
mendeley-groups = {Master Thesis},
number = {1},
pages = {102--126},
title = {{Power-saving localization techniques for mobile devices}},
url = {http://www.emeraldinsight.com/doi/10.1108/IJPCC-01-2015-0001},
volume = {11},
year = {2015}
}
@article{Nanz2015,
abstract = {Sometimes debates on programming languages are more religious than scientific. Questions about which language is more succinct or efficient, or makes developers more productive are discussed with fervor, and their answers are too often based on anecdotes and unsubstantiated beliefs. In this study, we use the largely untapped research potential of Rosetta Code, a code repository of solutions to common programming tasks in various languages, to draw a fair and well-founded comparison. Rosetta Code offers a large data set for analysis. Our study is based on 7087 solution programs corresponding to 745 tasks in 8 widely used languages representing the major programming paradigms (procedural: C and Go; object-oriented: C{\#} and Java; functional: F{\#} and Haskell; scripting: Python and Ruby). Our statistical analysis reveals, most notably, that: functional and scripting languages are more concise than procedural and object-oriented languages; C is hard to beat when it comes to raw speed on large inputs, but performance differences over inputs of moderate size are less pronounced and allow even interpreted languages to be competitive; compiled strongly-typed languages, where more defects can be caught at compile time, are less prone to runtime failures than interpreted or weakly-typed languages. We discuss implications of these results for developers, language designers, and educators.},
archivePrefix = {arXiv},
arxivId = {1409.0252},
author = {Nanz, Sebastian and Furia, Carlo A.},
doi = {10.1109/ICSE.2015.90},
eprint = {1409.0252},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/M.3 - A Comparative Study of Programming Languages in Rosetta Code.pdf:pdf},
isbn = {9781479919345},
issn = {02705257},
journal = {Proceedings - International Conference on Software Engineering},
mendeley-groups = {Master Thesis},
number = {978},
pages = {778--788},
title = {{A comparative study of programming languages in rosetta code}},
volume = {1},
year = {2015}
}
@misc{Coutts2012,
author = {Coutts, Duncan},
booktitle = {Haskell Implementors Workshop},
mendeley-groups = {Master Thesis},
title = {{Cloud Haskell 2.0}},
url = {https://www.youtube.com/watch?v=1jJ2paFuErM},
urldate = {2018-01-09},
year = {2012}
}
@misc{Maguire2017,
author = {Maguire, Sandy},
booktitle = {Bay Area Haskell},
mendeley-groups = {Master Thesis},
title = {{Don't Eff It Up: Free Monads in Action}},
url = {https://www.youtube.com/watch?v=gUPuWHAt6SA},
urldate = {2018-01-09},
year = {2017}
}
@misc{,
booktitle = {ICFP Video},
mendeley-groups = {Master Thesis},
title = {{Freer Monad, More Extensible Effects}},
url = {https://www.youtube.com/watch?v=3Ltgkjpme-Y},
urldate = {2018-01-09},
year = {2015}
}
@misc{Gonzalez2012,
abstract = {Good programmers decompose data from the interpreter that processes that data. Compilers exemplify this approach, where they will typically represent the source code as an abstract syntax tree, and then pass that tree to one of many possible interpreters. We benefit from decoupling the interpreter and the syntax tree, because then we can interpret the syntax tree in multiple ways.},
author = {Gonzalez, Gabriel},
mendeley-groups = {Master Thesis},
title = {{Haskell for all: Why free monads matter}},
url = {http://www.haskellforall.com/2012/06/you-could-have-invented-free-monads.html},
urldate = {2018-01-07},
year = {2012}
}
@misc{Haskell-lang.org2017,
author = {Haskell-lang.org},
mendeley-groups = {Master Thesis},
title = {{Haskell: An advanced purely-functional programming language}},
url = {https://haskell-lang.org/},
urldate = {2017-09-27},
year = {2017}
}
@misc{Milewski2014,
author = {Milewski, Bartosz},
mendeley-groups = {Master Thesis},
title = {{3. Pure Functions, Laziness, I/O, and Monads}},
url = {https://www.schoolofhaskell.com/school/starting-with-haskell/basics-of-haskell/3-pure-functions-laziness-io},
urldate = {2017-09-27},
year = {2014}
}
@article{Bois2005,
author = {Bois, Ar Du and Trinder, Phil},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.2 - mHaskell - Mobile Computation in a Purely Functional Language.pdf:pdf},
issn = {0958695X},
journal = {Journal of Universal Computer Science},
mendeley-groups = {Master Thesis},
title = {{mHaskell: Mobile computation in a purely functional language}},
url = {http://www.jucs.org/jucs{\_}11{\_}7/.../jucs{\_}11{\_}7{\_}1234{\_}1254{\_}dubois.html;internal{\&}action=noaction{\&}Parameter=1294952146346},
year = {2005}
}
@article{Huang2012,
abstract = {With the recent advent of 4G LTE networks, there has been increasing interest to better understand the performance and power characteristics, compared with 3G/WiFi networks. In this paper, we take one of the first steps in this direction. Using a publicly deployed tool we designed for Android called 4GTest attracting more than 3000 users within 2 months and extensive local experiments, we study the network performance of LTE networks and compare with other types of mobile networks. We observe LTE generally has significantly higher downlink and uplink throughput than 3G and even WiFi, with a median value of 13Mbps and 6Mbps, respectively. We develop the first empirically derived comprehensive power model of a commercial LTE network with less than 6{\%} error rate and state transitions matching the specifications. Using a comprehensive data set consisting of 5-month traces of 20 smartphone users, we carefully investigate the energy usage in 3G, LTE, and WiFi networks and evaluate the impact of configuring LTE-related parameters. Despite several new power saving improvements, we find that LTE is as much as 23 times less power efficient compared with WiFi, and even less power efficient than 3G, based on the user traces and the long high power tail is found to be a key contributor. In addition, we perform case studies of several popular applications on Android in LTE and identify that the performance bottleneck for web-based applications lies less in the network, compared to our previous study in 3G [24]. Instead, the device's processing power, despite the significant improvement compared to our analysis two years ago, becomes more of a bottleneck.},
author = {Huang, Junxian and Quian, Feng and Gerber, Alexandre and Mao, Z. Morley and Sen, Subhabrata and Spatscheck, Oliver},
doi = {10.1145/2307636.2307658},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.E.1 - A Close Examination of Performance and Power Characteristics of 4G LTE Networks.pdf:pdf},
isbn = {9781450313018},
journal = {MobiSys},
keywords = {3g,4g,4gtest,all or part of,energy saving,lte,net-,or hard copies of,permission to make digital,power model simulation,this work for,work model simulation},
mendeley-groups = {Master Thesis},
pages = {225--238},
title = {{A Close Examination of Performance and Power Characteristics of 4G LTE Networks}},
year = {2012}
}
@article{Freeman,
author = {Freeman, Phil},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/P.1 - Purescript by Example.pdf:pdf},
mendeley-groups = {Master Thesis},
title = {{PureScript by Example Functional Programming for the Web}},
year = {2016}
}
@article{Benedetto2017,
author = {Benedetto, Jose I. and Neyem, Andres and Navon, Jaime and Valenzuela, Guillermo},
doi = {10.1109/MOBILESoft.2017.20},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.6 - Rethinking the mobile code offloading paradigm - from concept to practice.pdf:pdf},
isbn = {9781538626696},
journal = {Proceedings - 2017 IEEE/ACM 4th International Conference on Mobile Software Engineering and Systems, MOBILESoft 2017},
keywords = {Cloud-Based Mobile Augmentation,Mobile Cloud Computing,Mobile Cloud-Based Systems,Mobile Code Offloading,Software Defined Networks},
mendeley-groups = {Master Thesis},
pages = {63--67},
title = {{Rethinking the Mobile Code Offloading Paradigm: From Concept to Practice}},
year = {2017}
}
@article{Siekkinen2013,
abstract = {Siekkinen, M., Hoque, M.A., Nurminen, J.K. and Aalto, M., 2013, February. Streaming over 3G and LTE: How to save smartphone energy in radio access network-friendly way. In Proceedings of the 5th Workshop on Mobile Video (pp. 13-18). ACM.},
author = {Siekkinen, Matti and Ashraful, Mohammad and Nurminen, Jukka K and Aalto, M},
doi = {10.1145/2457413.2457417},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.7 - Streaming over 3G and LTE - How to Save Smartphone Energy in Radio Access Network-Friendly Way.pdf:pdf},
isbn = {9781450318938},
journal = {5th ACM Workshop on Mobile Video, February 27 - March 01, 2013},
keywords = {3g,energy,lte,smartphone,streaming},
mendeley-groups = {Master Thesis},
pages = {13--18},
title = {{Streaming over 3G and LTE : How to Save Smartphone Energy in Radio Access Network-Friendly Way}},
year = {2013}
}
@article{Marlow2014,
abstract = {We describe a new programming idiom for concurrency, based on Applicative Functors, where concurrency is implicit in the Applicative {\textless}*{\textgreater} operator. The result is that concurrent programs can be written in a natural applicative style, and they retain a high degree of clarity and modularity while executing with maximal concur- rency. This idiom is particularly useful for programming against external data sources, where the application code is written without the use of explicit concurrency constructs, while the implementa- tion is able to batch together multiple requests for data from the same source, and fetch data from multiple sources concurrently. Our abstraction uses a cache to ensure that multiple requests for the same data return the same result, which frees the programmer from having to arrange to fetch data only once, which in turn leads to greater modularity. While it is generally applicable, our technique was designed with a particular application in mind: an internal service at Facebook that identifies particular types of content and takes actions based on it. Our application has a large body of business logic that fetches data from several different external sources. The framework described in this paper enables the business logic to execute efficiently by automatically fetching data concurrently; we present some preliminary results.},
author = {Marlow, Simon and Brandy, Louis and Coens, Jonathan and Purdy, Jon},
doi = {10.1145/2628136.2628144},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.1 - There is no Fork- an Abstraction for Efficient, Concurrent, and Concise Data Access.pdf:pdf},
isbn = {9781450328739},
issn = {15232867},
journal = {ICFP '14 Proceedings of the 19th ACM SIGPLAN international conference on Functional programming},
keywords = {applicative,concurrency,data-fetching,haskell,monad},
mendeley-groups = {Master Thesis},
number = {Section 9},
pages = {325--337},
title = {{There is no Fork: an Abstraction for Efficient , Concurrent , and Concise Data Access}},
year = {2014}
}
@article{Cuervo2010,
abstract = {This paper presents MAUI, a system that enables fine-grained energy-aware offload of mobile code to the infrastructure. Previous approaches to these problems either relied heavily on programmer support to partition an application, or they were coarse-grained re- quiring full process (or full VM) migration. MAUI uses the benefits of a managed code environment to offer the best of both worlds: it supports fine-grained code offload to maximize energy savings with minimal burden on the programmer. MAUI decides at run- time which methods should be remotely executed, driven by an op- timization engine that achieves the best energy savings possible un- der the mobile devices current connectivity constrains. In our eval- uation, we show that MAUI enables: 1) a resource-intensive face recognition application that consumes an order of magnitude less energy, 2) a latency-sensitive arcade game application that doubles its refresh rate, and 3) a voice-based language translation applica- tion that bypasses the limitations of the smartphone environment by executing unsupported components remotely.},
author = {Cuervo, Eduardo and Balasubramanian, Aruna and Cho, Dae-ki and Wolman, Alec and Saroiu, Stefan and Chandra, Ranveer and Bahl, Paramvir},
doi = {10.1145/1814433.1814441},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.7 - MAUI - Making Smartphones Last Longer with Code Offload.pdf:pdf},
isbn = {9781605589855},
issn = {10058885},
journal = {MobiSys'10},
keywords = {code offload,energy management,partitioning,smartphones},
mendeley-groups = {Master Thesis},
pages = {49--62},
title = {{MAUI: Making Smartphones Last Longer with Code Offload}},
url = {http://dl.acm.org/citation.cfm?id=1814441},
volume = {17},
year = {2010}
}
@article{Liu2016,
abstract = {Caching at the wireless edge is a promising way to boost spectral efficiency and reduce energy consumption of wireless systems. These improvements are rooted in the fact that popular contents are reused, asynchronously, by many users. In this article we first introduce methods to predict the popularity distributions and user preferences, and the impact of erroneous information. We then discuss the two aspects of caching systems, content placement and delivery. We expound the key differences between wired and wireless caching, and outline the differences in the system arising from where the caching takes place (e.g., at base stations or on the wireless devices themselves). Special attention is paid to the essential limitations in wireless caching, and possible trade-offs between spectral efficiency, energy efficiency, and cache size. {\textcopyright} 2016 IEEE.},
author = {Liu, Dong and Chen, Binqiang and Yang, Chenyang and Molisch, Andreas F.},
doi = {10.1109/MCOM.2016.7565183},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.C.1 - Caching at the Wireless Edge - Design Aspects, Challenges, and Future Directions.pdf:pdf},
issn = {01636804},
journal = {IEEE Communications Magazine},
mendeley-groups = {Master Thesis},
number = {9},
pages = {22--28},
title = {{Caching at the wireless edge: Design aspects, challenges, and future directions}},
volume = {54},
year = {2016}
}
@article{Rosen2015,
abstract = {Energy consumption due to network traffic on mobile devices continues to be a significant concern. We examine a range of excessive energy consumption problems caused by background network traffic through a two-year user study, and also validate these findings through in-lab testing of the most recent versions of major mobile apps. We discover a new energy consumption problem where foreground network traffic persists after switching from the foreground to the background, leading to unnecessary energy and data drain. Furthermore, while we find some apps have taken steps to improve the energy impact of periodic background traffic, energy consumption differences of up to an order of magnitude exist between apps with near-identical functionality. Finally, by examining how apps are used in the wild, we find that some apps continue to generate unneeded traffic for days when the app is not being used, and in some cases this wasted traffic is responsible for a majority of the app's network energy overhead. We propose that these persistent, widespread and varied sources of excessive energy consumption in popular apps should be addressed through new app management tools that tailor network activity to user interaction patterns. {\textcopyright} 2015 ACM.},
author = {Rosen, Sanae and Nikravesh, Ashkan and Guo, Yihua and Mao, Z Morley and Qian, Feng and Sen, Subhabrata},
doi = {10.1145/2815675.2815713},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.6 - Revisiting Network Energy Efficiency of Mobile Apps - Performance in the Wild.pdf:pdf},
isbn = {9781450338486},
journal = {HotMobile '15},
keywords = {4g lte,cellular network performance,mobile en-,smartphones},
mendeley-groups = {Master Thesis},
pages = {339--345},
title = {{Revisiting Network Energy Efficiency of Mobile Apps : Performance in the Wild}},
year = {2015}
}
@article{Takenobu2015,
author = {Takenobu, T.},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.5 - GHC(STG,Cmm,asm) illustrated for hardware persons.pdf:pdf},
mendeley-groups = {Master Thesis},
title = {{GHC illustrated}},
year = {2015}
}
@article{Cui2014,
abstract = {In cellular networks, it is important to conserve energy while at the same time ensuring users to have good transmission experiences. The energy cost can result from tail energy due to the radio resource control strategies designed in cellular networks and data transmission. Existing efforts generally consider one of the energy issues, and also ignore the adverse impact on user transmission performance due to energy conservation. In addition, many existing algorithms are based on prediction and knowledge on future traffic, which are hard to apply in a practical wireless system with dynamic user traffic and channel condition. The goal of this work is to design an efficient online scheduling algorithm to minimize energy consumption both due to tail energy and transmissions while meeting user performance expectation. We prove the problem to be NP-hard, and design a practical online scheduling algorithm PerES to minimize the total energy cost of multiple mobile applications subject to user performance constraints. We propose a comprehensive performance cost metric to capture the impacts due to task delay, deadline violation, different application profiles and user preferences. We prove that our proposed scheduling algorithm can make the energy consumption arbitrarily close to that of the optimal scheduling solution. The evaluation results demonstrate the effectiveness of our scheme and its higher performance than peers. Moreover, by supporting dynamic performance requirement by mobile users, PerES can achieve 2 times faster convergence to both the performance degradation bound and optimal energy conversation bound than those of traditional static methods. Using 821 million traffic flows collected from a commercial cellular carrier, we verify our scheme could achieve on average 32{\%}-56{\%} energy savings with different levels of user experience. {\textcopyright} 2014 IEEE.},
author = {Cui, Y and Xiao, S and Wang, X and Li, M and Wang, H and Lai, Z},
doi = {10.1109/INFOCOM.2014.6848043},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.5 - Performance-Aware Energy Optimization on Mobile Devices in Cellular Network.pdf:pdf},
isbn = {0743166X (ISSN); 9781479933600 (ISBN)},
journal = {33rd IEEE Conference on Computer Communications, IEEE INFOCOM 2014},
keywords = {Comprehensive performance,Costs,Dynamic performance,Energy conservation,Energy optimization,Energy utilization,Mobile applications,Mobile devices,Mobile telecommunication systems,Online scheduling algorithm,Optimization,Performance degradation,Radio resource control,Scheduling,Scheduling algorithms,Transmission performance,User interfaces},
mendeley-groups = {Master Thesis},
number = {4},
pages = {1123--1131},
title = {{Performance-aware energy optimization on mobile devices in cellular network}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84904430663{\&}partnerID=40{\&}md5=b465b2f3a7f68489d8fa63ea779678d2},
volume = {16},
year = {2014}
}
@article{Golkarifard2017,
author = {Golkarifard, Morteza and Yang, Ji and Movaghar, Ali and Hui, Pan},
doi = {10.1109/MCOM.2017.1600481},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.4 - A Hitchhiker's Guide to Computation Offloading - Opinions from Practitioners.pdf:pdf},
issn = {01636804},
journal = {IEEE Communications Magazine},
mendeley-groups = {Master Thesis},
number = {7},
pages = {193--199},
title = {{A Hitchhiker's guide to computation offloading: Opinions from practitioners}},
volume = {55},
year = {2017}
}
@article{Flores2013,
abstract = {My Summary: The idea of this paper is over the offloading consider all state of computing environment (based on log analisis in clusters) instead of mobile device observation. unlike other approaches, we think that o oad-ing is not a local decision process that happens just within the device's context, but rather o oading is a learning pro-cess that involves a global understanding of the infrastruc-ture.},
author = {Flores, Huber and Srirama, Satish},
doi = {10.1145/2462456.2465722},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.5 - Mobile Code Offloading - Should it be a Local Decision or Global Inference?.pdf:pdf},
isbn = {978-1-4503-1672-9},
journal = {Proceeding of the 11th annual international conference on Mobile systems, applications, and services},
keywords = {Cloud computing,code offloading,machine learning,mobile cloud,mobile computing},
mendeley-groups = {Master Thesis},
pages = {539--540},
title = {{Mobile code offloading: should it be a local decision or global inference?}},
url = {http://doi.acm.org/10.1145/2462456.2465722},
year = {2013}
}
@article{Paykin2017,
author = {Paykin, Jennifer and Zdancewic, Steve},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.3 - The Linearity Monad.pdf:pdf},
isbn = {9781450351829},
keywords = {2017,acm reference format,ceedings of 10th acm,haskell,in pro-,jennifer paykin and steve,linear,monads,non-linear logic,oxford,sigplan international haskell symposium,the linearity monad,zdancewic},
mendeley-groups = {Master Thesis},
number = {1},
pages = {117--132},
title = {{The Linearity Monad}},
volume = {1},
year = {2017}
}
@article{Panwar2016,
abstract = {The rapidly increasing number of mobile devices, voluminous data, and higher data rate are pushing to rethink the current generation of the cellular mobile communication. The next or fifth generation (5G) cellular networks are expected to meet high-end requirements. The 5G networks are broadly characterized by three unique features: ubiquitous connectivity, extremely low latency, and very high-speed data transfer. The 5G networks would provide novel architectures and technologies beyond state-of-the-art architectures and technologies. In this paper, our intent is to find an answer to the question: "what will be done by 5G and how?" We investigate and discuss serious limitations of the fourth generation (4G) cellular networks and corresponding new features of 5G networks. We identify challenges in 5G networks, new technologies for 5G networks, and present a comparative study of the proposed architectures that can be categorized on the basis of energy-efficiency, network hierarchy, and network types. Interestingly, the implementation issues, e.g., interference, QoS, handoff, security-privacy, channel access, and load balancing, hugely effect the realization of 5G networks. Furthermore, our illustrations highlight the feasibility of these models through an evaluation of existing real-experiments and testbeds.},
archivePrefix = {arXiv},
arxivId = {1511.01643},
author = {Panwar, Nisha and Sharma, Shantanu and Singh, Awadhesh Kumar},
doi = {10.1016/j.phycom.2015.10.006},
eprint = {1511.01643},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.2 - A Survey on 5G - The Next Generation of Mobile Communication.pdf:pdf},
issn = {18744907},
journal = {Physical Communication},
keywords = {Cloud radio access networks,Cognitive radio networks,D2D communication,Dense deployment,Multi-tier heterogeneous network,Tactile Internet},
mendeley-groups = {Master Thesis},
pages = {64--84},
title = {{A survey on 5G: The next generation of mobile communication}},
volume = {18},
year = {2016}
}
@article{Bernardy2010,
abstract = {Linear and affine type systems have a long and storied history, but not a clear path forward to integrate with existing languages such as Ocaml or Haskell. In this paper, we introduce and study a linear type system designed with two crucial properties in mind: backwards-compatibility and code reuse across linear and non-linear users of a library. Only then can the benefits of linear types permeate conventional functional programming. Rather than bifurcate data types into linear and non-linear counterparts, we instead attach linearity to binders. Linear function types can receive inputs from linearly-bound values, but can also operate over unrestricted, regular values. Linear types are an enabling tool for safe and resource efficient systems programming. We explore the power of linear types with a case study of a large, in-memory data structures that must serve responses with low latency.},
archivePrefix = {arXiv},
arxivId = {1611.02756},
author = {Bernardy, Jean-Philippe and Boespflug, Mathieu and Newton, Ryan R and Jones, Simon Peyton},
doi = {10.1145/nnnnnnn.nnnnnnn},
eprint = {1611.02756},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/H.4 - Retrofitting Linear Types.pdf:pdf},
isbn = {9781450335492},
issn = {15232867},
journal = {PACM Progr. Lang. Article},
mendeley-groups = {Master Thesis},
number = {39},
title = {{Retrofitting Linear Types}},
volume = {9},
year = {2010}
}
@article{Lin2014,
abstract = {Mobile device hardware can limit the sophistication$\backslash$nof mobile applications. One strategy for$\backslash$nside-stepping these constraints is to$\backslash$nopportunistically offload computations to the cloud,$\backslash$nwhere more capable hardware can do the heavy$\backslash$nlifting. We propose a platform that accomplishes$\backslash$nthis via compressive offloading, a novel application$\backslash$nof compressive sensing in a distributed shared$\backslash$nmemory setting. Our prototype gives up to an$\backslash$norder-of-magnitude acceleration and 60{\%} longer$\backslash$nbattery life to the end user of an example$\backslash$nhandwriting recognition app. We argue that$\backslash$noffloading is beneficial to both end users and cloud$\backslash$nprovidersâ€”the former experiences a performance boost$\backslash$nand the latter receives a steady stream of small$\backslash$ncomputations to fill periods of$\backslash$nunder-utilization. Such workloads, originating from$\backslash$nARM-based mobile devices, are especially well-suited$\backslash$nfor offloading to emerging ARM-based data centers.},
author = {Lin, Chit-kwan},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.3 - Mobile App Acceleration via Fine-Grain Offloading to the Cloud.pdf:pdf},
journal = {6th USENIX Workshop on Hot Topics in Cloud Computing},
mendeley-groups = {Master Thesis},
title = {{Mobile App Acceleration via Fine-Grain Offloading to the Cloud}},
year = {2014}
}
@article{Jiao2013,
abstract = {Mobile cloud computing is a new rapidly growing field. In addition to the conventional fashion that mobile clients access cloud services as in the well-known client/server model, existing work has proposed to explore cloud functionalities in another perspective - offloading part of the mobile codes to the cloud for remote execution in order to optimize the application performance and energy efficiency of the mobile device. In this position paper, we investigate the state of the art of code offloading for mobile devices, highlight the significant challenges towards a more efficient cloud-based offloading framework, and also point out how existing technologies can provide us opportunities to facilitate the framework implementation.},
author = {Jiao, Lei and Friedman, Roy and Fu, Xiaoming},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.2 - Cloud-based computation offloading for mobile devices - State of the art, challenges and opportunities.pdf:pdf},
isbn = {9781905824},
journal = {Future Network and Mobile Summit (FutureNetworkSummit)},
mendeley-groups = {Master Thesis},
pages = {1--11},
title = {{Cloud-based computation offloading for mobile devices: State of the art, challenges and opportunities}},
url = {http://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=6633526},
year = {2013}
}
@article{Vallina-rodriguez2012,
author = {Vallina-rodriguez, Narseo and Crowcroft, Jon},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.E.3 - Energy Management Techniques in Modern Mobile Handsets.pdf:pdf},
journal = {Context},
mendeley-groups = {Master Thesis},
number = {1},
pages = {1--20},
title = {{Modern Mobile Handsets}},
volume = {15},
year = {2012}
}
@article{Nabi2015,
abstract = {This paper presents the results of a formative study conducted to determine the effects of computation offloading in mobile applications by comparing application performance (chiefly energy consumption and response time). The study examined two general execution scenarios: (1) computation is performed locally on a mobile device, and (2) computation is offloaded entirely to the cloud. The study also carefully considered the underlying network characteristics as an important factor affecting the performance. More specifically, we refactored two mobile applications to offload their computationally intensive functionality to execute in the cloud. We then profiled these applications under different network conditions, and carefully measured application performance in each case. The results indicate that on fast networks, offloading is almost always beneficial. However, on slower networks, the offloading cost-benefit analysis is not as clear cut. The characteristics of the data transferred between the mobile device and the cloud may be a deciding factor in determining whether computation offloading would improve performance. {\textcopyright} 2015 ACM.},
author = {Nabi, T and Mittal, P and Azimi, P and Dig, D and Tilevich, E},
doi = {10.1145/2846661.2846663},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/O.1 - Assessing the Benefits of Computational Offloading in Mobile-Cloud Applications.pdf:pdf},
isbn = {978-1-4503-3906-3},
journal = {MobileDeLi 2015 - Proceedings of the 3rd International Workshop on Mobile Development Lifecycle},
keywords = {Cloud offloading,Energy efficiency,Execution performance,Mobile applications},
mendeley-groups = {Master Thesis},
pages = {17--24},
title = {{Assessing the benefits of computational offloading in mobile-cloud applications}},
url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-84964228173{\&}partnerID=40{\&}md5=293caae9f4f94eb2433a5292c2a06ba1},
year = {2015}
}
@article{Gupta2013,
abstract = {Mobile Internet applications run on devices such as smartphones and tablets, and have dramatically changed the landscape of applicationgenerated network traffic. The potent combination of millions of such applications and the instant accessibility of high-speed Internet on mobile devices through 3G and now LTE technology has also changed how users themselves interact with the Internet. Specifically, the radio states in LTE such as RRC{\_}Connected and RRC{\_}Idle were designed with more traditional applications such as web browsing and FTP in mind. These traditional applications typically generated traffic only during Active (Connected) state, and once the user session ended, usually the traffic ended too, thus allowing the radio to move to Inactive (Idle) state. However, newer applications such as Facebook and Twitter generate a constant stream of autonomous and/or user generated traffic at all times, thus erasing the previously clear demarcation between Active and Inactive states. This means a given mobile device (or user equipment, in LTE parlance) often ends up moving between Connected and Idle states frequently to send mostly short bursts of data, draining device battery and causing excessive signaling overhead in LTE networks. This problem has grown and attracted the research community's attention to address the negative effects of frequent back and forth transitions between LTE radio states. In this article, we first explore the traffic characteristics of these emerging mobile Internet applications and how they differ from more traditional applications. We investigate their impact on LTE device power and air interface signaling. We then present a survey of state-of-the-art solutions proposed in literature to address the problems, and analyze their merits and demerits. Lastly, we discuss the solutions adopted by 3GPP including the latest developments in Release 11 to handle these issues, and present potential future research directions in this field.},
author = {Gupta, M. and Jha, S.C. and Koc, A.T. and Vannithamby, R.},
doi = {10.1109/MCOM.2013.6461191},
file = {:Users/tehnix/Dropbox/University/Masters/Master Thesis/Whitepapers/N.E.2 - Energy impact of emerging mobile internet applications on LTE networks.pdf:pdf},
issn = {0163-6804},
journal = {IEEE Communications Magazine},
mendeley-groups = {Master Thesis},
number = {2},
pages = {90 --97},
title = {{Energy impact of emerging mobile internet applications on LTE networks: issues and solutions}},
url = {http://ieeexplore.ieee.org/ielx5/35/6461169/06461191.pdf?tp={\&}arnumber=6461191{\&}isnumber=6461169{\%}5Cnhttp://ieeexplore.ieee.org/xpls/abs{\_}all.jsp?arnumber=6461191},
volume = {51},
year = {2013}
}
